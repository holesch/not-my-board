[project]
name = "not-my-board"
description = ''
readme = "README.md"
requires-python = ">=3.7"
license = {file = "LICENSE.txt"}
keywords = []
authors = [
  { name = "Simon Holesch", email = "simon@holesch.de" },
]
classifiers = [
  "Development Status :: 1 - Planning",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dependencies = [
    "asgineer",
    "h11",
    "pydantic ~= 1.10",
    "tomli; python_version < '3.11'",
    "typing_extensions; python_version < '3.9'",
    "uvicorn",
    "websockets",
]
dynamic = ["version"]

[project.urls]
Documentation = "https://github.com/holesch/not-my-board#readme"
Issues = "https://github.com/holesch/not-my-board/issues"
Source = "https://github.com/holesch/not-my-board"

[project.scripts]
not-my-board = "not_my_board.cli:main"

[project.optional-dependencies]
test = [
    "black",
    "codespell",
    "isort",
    "mypy",
    "pylint",
    "pylint-pytest",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
]

[build-system]
build-backend = 'mesonpy'
requires = ['meson-python']

[tool.pytest.ini_options]
addopts = ["--quiet"]
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "not_my_board/__about__.py",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.pylint.MASTER]
load-plugins = "pylint_pytest"

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "attribute-defined-outside-init",
    "broad-exception-caught",
    "fixme",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",
    "no-else-raise",
    "no-else-return",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "unspecified-encoding",
]
# allow short names
variable-rgx = "^_{,2}[a-z][a-z0-9_]{,30}$"
argument-rgx = "^_{,2}[a-z][a-z0-9_]{,30}$"
attr-rgx = "^_{,2}[a-z][a-z0-9_]{,30}$"
function-rgx = "^_{,2}[a-z][a-z0-9_]{,30}$"
# pylint doesn't support lazy_import()
generated-members = [
    "websockets",
    "pydantic",
    "ImportRequest",
    "ImportReply",
]

[tool.isort]
profile = "black"
